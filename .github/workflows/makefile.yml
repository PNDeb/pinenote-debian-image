name: Build Debian image using github actions

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  create_data_partition_dummy:
    strategy:
      matrix:
        # generate images for the following partition numbers
        partition: [6, 7, 8, 9, ]
    runs-on: ubuntu-latest
    needs:
      - build_images
    steps:
      - uses: actions/checkout@v3
      # action is based on https://gitlab.com/pgwipeout/quartz64_ci/-/blob/main/.gitlab-ci.yml
      - name: Create dummy partition
        run: |
          fallocate -l 40MB data_part_dummy_p${{matrix.partition}}.bin
          mkfs.ext4 data_part_dummy_p${{matrix.partition}}.bin
          mkdir tmp
          sudo mount -v -o loop data_part_dummy_p${{matrix.partition}}.bin tmp
          sudo touch tmp/pn_use_as_home_mmcblk0p${{matrix.partition}}
          sudo touch tmp/pn_recreate_fs_mmcblk0p${{matrix.partition}}
          sudo touch tmp/pn_transfer_files_mmcblk0p${{matrix.partition}}
          sudo umount tmp
          rm -r tmp

      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: data_part_dummy_partition_${{matrix.partition}}
          path: data_part_dummy_p${{matrix.partition}}.bin

  create_uboot_env_partition:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # action is based on https://gitlab.com/pgwipeout/quartz64_ci/-/blob/main/.gitlab-ci.yml
      - name: Install dosfstools
        run: sudo apt -y install dosfstools
      - name: Create u-boot environment partition
        run: |
          ls
          pwd
          fallocate -l 4MB data_part_uboot_env.bin
          mkfs.vfat data_part_uboot_env.bin
          mkdir tmp_ub
          sudo mount -v -o loop data_part_uboot_env.bin tmp_ub
          sudo cp uboot_env/uboot.env tmp_ub/
          sudo umount tmp_ub
          rm -r tmp_ub

      - name: Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: data_part_uboot_env
          path: data_part_uboot_env.bin

  compile_uboot:
    runs-on: ubuntu-latest
    name: compile uboot for the PineNote
    needs:
      - build_images
    steps:
      - name: Prepare environment
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential crossbuild-essential-arm64 device-tree-compiler python3-pyelftools
      - name: Checkout rkbin
        run: |
          test -d rkbin || git clone --depth 1 --branch master https://github.com/rockchip-linux/rkbin.git
          test -d u-boot-pinenote || git clone --branch branch_cyttsp5ub --depth 1 https://github.com/m-weigand/u-boot-pinenote
          cd u-boot-pinenote
          export CROSS_COMPILE=aarch64-linux-gnu-
          make clean;
          make rk3566-pinenote_defconfig;
          ./make.sh
          ./make.sh trust
      - name: Upload files
        uses: actions/upload-artifact@v3
        with:
          name: uboot-files
          path: |
            u-boot-pinenote/uboot.img
            u-boot-pinenote/trust.img
            u-boot-pinenote/idblock.bin

  generate_spl_boot_file:
    runs-on: ubuntu-latest
    needs:
      - build_images
    name: Geneate rk356x_spl_loader_v1.12.112.bin
    steps:
      - name: Prepare environment
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential crossbuild-essential-arm64 device-tree-compiler python3-pyelftools
      - name: Checkout rkbin
        run: |
          test -d rkbin && rm -rf rkbin
          git clone --shallow-since="2022-01-02T00:00:00Z" https://github.com/rockchip-linux/rkbin
          cd rkbin
          git checkout b6354b9
          tools/boot_merger RKBOOT/RK3566MINIALL.ini
      - name: Upload files
        uses: actions/upload-artifact@v3
        with:
          name: rk356x_spl_loader_v1.12.112.bin
          path: |
            rkbin/rk356x_spl_loader_v1.12.112.bin
